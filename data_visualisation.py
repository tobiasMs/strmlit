# -*- coding: utf-8 -*-
"""Data Visualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1loGg_Y0Bo7LC5FTkHNnAYHzN7p5Bluea
"""

pip install streamlit

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

from google.colab import drive
drive.mount( '/content/drive')

data='/content/drive/MyDrive/Datasheet/E-Commerce Public Dataset/products_dataset.csv'

data2='/content/drive/MyDrive/Datasheet/E-Commerce Public Dataset/customers_dataset.csv'

data3='/content/drive/MyDrive/Datasheet/E-Commerce Public Dataset/order_items_dataset.csv'

data4='/content/drive/MyDrive/Datasheet/E-Commerce Public Dataset/product_category_name_translation.csv'

data5='/content/drive/MyDrive/Datasheet/E-Commerce Public Dataset/orders_dataset.csv'

"""# Data Preparation"""

products_df=pd.read_csv(data)

customers_df=pd.read_csv(data2)

order_item_df=pd.read_csv(data3)

translate_df=pd.read_csv(data4)

orders_df=pd.read_csv(data5)

products_df.info()

translate_df.info()

customers_df.info()

order_item_df.info()

orders_df.info()

"""karena informasi dari tiap file berbeda, maka perlu dilakukan grouping berdasarkan id tiap order maupun customer. Dalam data ini, saya berpatokan pada order_items.csv untuk pembelian

##proses penggabungan/group by customer_id pada dataset customers dan orders

pada proses ini, kemudian dibuat dataframe baru bernama join_df yang berisikan order_id, customer_city, customer_state, dan order_status
"""

join_df=customers_df.set_index('customer_id').join(orders_df.set_index('customer_id'), how='outer')
join_df=join_df[['order_id', 'customer_city', 'customer_state', 'order_status']]

join_df.info()

"""##proses penggabungan/group by order_id pada dataframe join_df dengan dataframe order_item_df

pada proses ini, kemudian dibuat dataframe baru bernama join yang berisikan product_id, customer_city, customer_state, price, dan order_status
"""

join2_df=join_df.set_index('order_id').join(order_item_df.set_index('order_id'), how='right')
join=join2_df[['product_id','customer_city','customer_state','price', 'order_status']]

join2_df.info()

join.head(-5)

"""##proses penggabungan/group by product_id pada dataframe join dengan dataframe product_df

pada proses ini, kemudian dibuat dataframe baru bernama join3_df yang berisikan customer_city, customer_state, price, order_status, dan product_category_name
"""

join2=join.set_index('product_id').join(products_df.set_index('product_id'),how='right')
join3_df=join2[['customer_city', 'customer_state', 'price', 'order_status', 'product_category_name']]

join3_df.info()

"""terlihat bahwa product category name memiliki missing value sehingga perlu dilakukan data manipulation supaya jumlah data sama"""

join3_df.product_category_name.fillna('NA',inplace=True)

join3_df.info()

"""Jumlah data sudah sama, yang berarti proses data manipulation telah berhasil

##proses penggabungan/group by product_category_name pada dataframe join3_df dengan dataframe translate_df

pada proses ini, kemudian dibuat dataframe baru bernama final_df yang berisikan customer_city, customer_state, price, order_status, dan product_category_name_english

final_df merupakan dataframe yang diolah
"""

final_df=join3_df.set_index('product_category_name').join(translate_df.set_index('product_category_name'), how='left')

final_df.info()

"""Dari final tabel yang akan digunakan, category name in english terdapat missing value, sehingga dilakukan data manipulation"""

final_df.product_category_name_english.fillna('NA',inplace=True)

final_df.info()

"""Jumlah setiap data sudah sama, sehingga tidak ada missing value. Data telah siap dilakukan Analisis

# Bagaimana Demografi Customer?
"""

jumlah_cust=final_df.groupby(['customer_state','customer_city'])['order_status'].count().reset_index()
print(jumlah_cust)

jumlah=jumlah_cust.sort_values(by='order_status', ascending=False)
print(jumlah)

# Mencari 3 customer_state terbanyak
top_3_states = jumlah_cust.groupby('customer_state')['order_status'].sum().nlargest(3).index

# Membuat bar chart untuk setiap customer_state
for state in top_3_states:
    state_data = jumlah_cust[jumlah_cust['customer_state'] == state]
    top_3_cities_in_state = state_data.nlargest(3, 'order_status')

    plt.figure(figsize=(12, 6))
    plt.bar(top_3_cities_in_state['customer_city'], top_3_cities_in_state['order_status'])
    plt.title(f'3 Customer City Terbanyak di {state}')
    plt.xlabel('Customer City')
    plt.ylabel('Jumlah')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

st.pyplot(fig)

"""# Produk Manakah yang Paling Laris Terjual?"""

jumlah_produk=final_df.groupby('product_category_name_english')['order_status'].count().reset_index()
print(jumlah_produk)

jumlah_produk=jumlah_produk.sort_values(by='order_status', ascending=False)
print(jumlah_produk)

laku = jumlah_produk.head(5)
rugi = jumlah_produk.tail(5)


fig, axes = plt.subplots(1, 2, figsize=(12, 6))

axes[0].bar(laku['product_category_name_english'], laku['order_status'], color='#72BCD4')
axes[0].set_title('Produk Paling Laku')
axes[0].set_xlabel('Produk')
axes[0].set_ylabel('Jumlah')

axes[1].bar(rugi['product_category_name_english'], rugi['order_status'], color='#D3D3D3')
axes[1].set_title('Produk Paling Rugi')
axes[1].set_xlabel('Produk')
axes[1].set_ylabel('Jumlah')

axes[0].tick_params(axis='x', rotation=45)
axes[1].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

st.pyplot(fig)